(define (make-request method path proto headerset)
  (let ((method method)
        (path path)
        (proto proto)
        (headers headerset)
        (basedir #f))
    (define (get-method) method)
    (define (get-proto) proto)
    (define (set-path! arg) (set! path arg))
    (define (get-path) path)
    (define (set-basedir! arg) (set! basedir arg))
    (define (get-basedir) basedir)
    (define (get-headers) headers)
    (define (get-header header)
      (let ((data (assq header headers)))
        (if (pair? data) (cdr data) #f)))

    (lambda (dispatch . args)
      (cond ((eq? dispatch 'get-method)
              (apply get-method args))
            ((eq? dispatch 'get-proto)
              (apply get-proto args))
            ((eq? dispatch 'set-path!)
              (apply set-path! args))
            ((eq? dispatch 'get-path)
              (apply get-path args))
            ((eq? dispatch 'set-basedir!)
              (apply set-basedir! args))
            ((eq? dispatch 'get-basedir)
              (apply get-basedir args))
            ((eq? dispatch 'get-headers)
              (apply get-headers args))
            ((eq? dispatch 'get-header)
              (apply get-header args))
            (else
              (display "make-request dispatch fallthrough\n"
                       (current-error-port))
              '())))))
