(define (make-import-environment)
  (let ((env (make-environment)))
    (%import env (current-environment) '(import) #t)
    env))

(define failed #f)

(define (run-testsuite-untimed file)
  (set! failed #f)
  (call/cc
    (lambda (k)
      (with-exception-handler
        (lambda (arg)
          (display " (failed)\n")
          (display arg) (newline)
          (set! failed #t)
          (k))
        (lambda ()
          (let ((env (make-import-environment)))
            (load file env))
          (gc))))))

(define (run-testsuite file)
  (display (last (string-split file #\/)))
  (display ": ")
  (let ((before (car (get-time-of-day))))
    (run-testsuite-untimed file)
    (cond ((not failed)
           (let* ((after (car (get-time-of-day)))
                  (secs (- (timeval-seconds after) (timeval-seconds before)))
                  (micros (- (timeval-microseconds after)
                             (timeval-microseconds before))))
               (display " (")
               (display (truncate (+ (* secs 1000) (/ micros 1000))))
               (display "ms)\n"))))))

(define (testsuite out)
  (let ((old-port (current-output-port)))
    (current-output-port out)
    (display "Running testsuite\n=================\n")
    (map (lambda (file) 
           (let ((filepath (string-append "src/test/" file)))
             (if (file-regular? filepath)
                 (run-testsuite filepath))))
         (directory-files "src/test/"))
    (current-output-port old-port)))
