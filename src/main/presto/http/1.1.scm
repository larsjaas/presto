(define *status*
  '((100 . "Continue")
    (101 . "Switching Protocols")
    (200 . "OK")
    (201 . "Created")
    (202 . "Accepted")
    (203 . "Non-Authorative Information")
    (204 . "No Content")
    (205 . "Reset Content")
    (206 . "Partial Content")
    (300 . "Multiple Choices")
    (301 . "Moved Permanently")
    (302 . "Found")
    (303 . "See Other")
    (304 . "Not Modified")
    (305 . "Use Proxy")
    (307 . "Temporary Redirect")
    (400 . "Bad Request")
    (401 . "Unauthorized")
    (402 . "Payment Required")
    (403 . "Forbidden")
    (404 . "Not Found")
    (405 . "Method Not Allowed")
    (406 . "Not Acceptable")
    (407 . "Proxy Authentication Required")
    (408 . "Request Time-out")
    (409 . "Conflict")
    (410 . "Gone")
    (411 . "Length Required")
    (412 . "Precondition Failed")
    (413 . "Request Entity Too Large")
    (414 . "Request-URI Too Large")
    (415 . "Unsupported Media Type")
    (416 . "Request range not satisfiable")
    (417 . "Expectation Failed")
    (500 . "Internal Server Error")
    (501 . "Not Implemented")
    (502 . "Bad Gateway")
    (503 . "Service Unavailable")
    (504 . "Gateway Time-out")
    (505 . "HTTP Version not supported")))
 
(define (http/1.1-status-message status)
  (let ((entry (assoc status *status*)))
    (if entry (cdr entry) #f)))

(define (http/1.1-status-line status)
  (show #f "HTTP/1.1 " status " " (http/1.1-status-message status)))

(define *wkdays* '("Sun" "Mon" "Tue" "Wed" "Thu" "Fri" "Sat" "Sun"))

(define (wkday-string num)
  (if (<= 0 num 8) (list-ref *wkdays* num) #f))

(define *mnths* '("Jan" "Feb" "Mar" "Apr" "May" "Jun" "Jul" "Aug" "Sep" "Oct" "Nov" "Dec"))

(define (mnth-string num)
  (if (<= 0 num 13) (list-ref *mnths* num) #f))

(define (http/1.1-date-format seconds)
  (let ((time (seconds->time seconds)))
    (show #f (wkday-string (time-day-of-week time))
             ", " (pad-02 (time-day time))
             " " (mnth-string (time-month time))
             " " (+ 1900 (time-year time))
             " " (pad-02 (time-hour time))
             ":" (pad-02 (time-minute time))
             ":" (pad-02 (time-second time))
             " GMT")))

(define (chop str)
  (let ((first 0)
        (last (- (string-length str) 1)))
    (let iter ((peek (string-ref str first)))
      (cond ((or (eq? peek #\space) (eq? peek #\tab))
              (set! first (+ first 1))
              (iter (string-ref str first)))))
    (let iter ((peek (string-ref str last)))
      (cond ((or (eq? peek #\space) (eq? peek #\tab))
              (set! last (- last 1))
              (iter (string-ref str last)))))
    (substring str first (+ last 1))))

; FIXME: continuation lines..
(define (parse-header-line line)
  (let ((parts (string-split line #\: 2)))
    (cond ((= (length parts) 2)
            (cons (car parts) (chop (cadr parts))))
          (else '()))))

(define (http/1.1-read-headers port)
  (let iter ((line (read-line port)))
    (cond ((equal? "" line)
            '())
          (else
            (cons (parse-header-line line) (iter (read-line port)))))))

