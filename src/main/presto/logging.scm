; until I figure out how the hell (chibi log) works, this will have to do...

(define *access-log* #f)
(define *error-log* #f)

(define (get-access-log-logger)
  *access-log*)

(define (get-error-log-logger)
  *error-log*)

(define (set-access-log-logger! logger)
  (set! *access-log* logger))

(define (set-error-log-logger! logger)
  (set! *error-log* logger))

(define (make-logger file)
  (let* ((logfd (open file (bitwise-ior open/write open/append open/create)))
         (logport (open-output-file-descriptor logfd))
         (level 3))
    (define (log-error . o)
      (cond ((>= level 1)
             (apply show logport (make-datestring (current-seconds)) " ERROR " o)
             (show logport nl)
             (log-flush))))
    (define (log-warning msg)
      (if (>= level 2)
          (show logport (make-datestring (current-seconds)) " WARNING " msg nl)))
    (define (log-info . o)
      (cond ((>= level 3)
             (apply show logport (make-datestring (current-seconds)) " INFO " o)
             (show logport nl)
             (log-flush))))
    (define (log-debug msg)
      (if (>= level 4)
          (show logport (make-datestring (current-seconds)) " DEBUG " msg nl)))
    (define (log-level)
      level)
    (define (set-log-level! lvl)
      (set! level lvl))
    (define (log-close)
      (close-output-port logport)
      (set! logfd #f)
      (set! logport #f))
    (define (log-flush)
      (flush-output logport))

    (lambda (dispatch . o)
      (cond ((eq? dispatch 'error) (apply log-error o))
            ((eq? dispatch 'info) (apply log-info o))
            ((eq? dispatch 'warning) (apply log-warning o))
            ((eq? dispatch 'debug) (apply log-debug o))
            ((eq? dispatch 'level) (apply log-level o))
            ((eq? dispatch 'set-level!) (apply set-log-level! o))
            ((eq? dispatch 'flush) (apply log-flush o))
            ((eq? dispatch 'close) (apply log-close o))
            (else #f)))))


